@startuml
'https://plantuml.com/class-diagram

package "Model" #FFF8DC{
    ChessBoard "1" o-- "0..*" Piece: contains >
    ChessBoard "1" *-- "63" Square: comprises >

    Square "1" o-- "0..1" Piece: contains >

    Piece "1" *-- "1" Animal
    Piece --|> Elephant
    Piece --|> JumpingPieces
    Piece --|> Rat
    JumpingPieces --|> Tiger
    JumpingPieces --|> Lion
}

package "Utils" {
    class Location
    class SaverLoader
    enum Side
    enum Type
    class BoardBuilder
}

Piece - BoardBuilder

class ChessBoard {
<plain>- squares: ArrayList<Square>
<plain>- rank2Name: String[]
<plain>- defaultLocations: int[][]
<plain>- position: Location[][]
<plain>- PLAYER_RED_INDEX: int
<plain>- PLAYER_BLUE_INDEX: int

<plain>+ ChessBoard() // constructor
<plain>+ getPosition(int, int): Location
<plain>+ getPositions(): Location[][]
<plain>+ checkLegalMove(Location, Location): boolean
'<plain>+ boolean checkLegalMove(int index, Location to)
<plain>+ moveTo(Location, Location): void
<plain>+ setPositionByDefault(): void
<plain>+ getSquare(Location): Square
<plain>+ void init(Location[][])
'<plain>+ void moveTo(int index, Location to)
<plain>+ checkWinner(): int
<plain>- clear(Location): void
}


package "View" #FFF8DC {
    BoardView -- ChessBoard
}

package "Controller" #FFF8DC {
    BoardController -- ChessBoard
    BoardController - BoardView
}
class BoardController{
<plain>- model: ChessBoard
<plain>- view: BoardView
<plain>- userInputLocation: Location
<plain>- scanner: Scanner
<plain>- player_turn: int
<plain>- dx, dy: int
<plain>+ BoardController(BoardView, Location[][], int) // constructor
<plain>+ BoardController(BoardView) // constructor
<plain>+ getModel(): ChessBoard
<plain>+ getController(BoardView): BoardController
<plain>+ updateModel(): void
<plain>+ updateView(): void
<plain>+ startPlaying(): void
<plain>+ ifCont(): boolean
}

class BoardView{
<plain>- chessBoard: ChessBoard
<plain>+ BoardView(ChessBoard model) // constructor
<plain>+ getChessBoard(): ChessBoard
<plain>+ printChessBoard(): void
}

class Square {
    <plain>- piece: Piece
    <plain>- type: Type

    <plain>+  Square(Piece, Type) // constructor
    <plain>+  getPieceContent(): Piece
    <plain>+  setContent(Piece): void
    <plain>+  getType(): Type
}

Abstract class JumpingPieces{
    <plain>+ JumpingPieces(Animal, Side)
    <plain>+ canMoveToEmpty(Location, Location, Square): boolean

}
class Elephant{
    <plain>+ Elephant(Side)
    <plain># boolean outRank(Animal)
}
class Tiger{
    <plain>+ Tiger(Side)
}

class Lion{
    <plain>+ Lion(Side)
}

class Rat{
    <plain>+ Rat(Side)
    <plain>+ canMoveToEmpty(Location, Location, Square): boolean
    <plain># outRank(Animal): boolean
}

class Piece {
    <plain># side: Side
    <plain># animal: Animal

    <plain>+ Piece(Animal, Side)
    <plain>+ canMoveToEmpty(Location, Location, Square): boolean
    <plain># outRank(Animal): boolean
    <plain>+ canTake(Square): boolean
}

enum Animal {
    RAT
    CAT
    DOG
    WOL
    LEO
    TIG
    LIO
    ELE
}

enum Side {
    RED
    BLUE
}

enum Type {
    RIVER
    TRAP1
    TRAP2
    DEN1
    DEN2
    NORMAL
}

class Location {
    <plain>-row: int
    <plain>-column: int
    <plain>-index: int
    <plain>+Location(int row, int column)   // Constructor 1
    <plain>+Location(int index) // Constructor 2
    <plain>+getRow(): int
    <plain>+getCol(): int
    <plain>+getIndex(): int

}

class SaverLoader {
    <plain>- SAVE_PATH: String
    <plain>+ save(String fileName, int playerTurn, Location[][] positions): boolean
    <plain>+ load(String fileName, BoardView view): BoardController
    <plain>+ isValidFileName(String): boolean

}

class BoardBuilder {
    <plain>+ Piece chessFactory(String, Side, int, int)
}

@enduml