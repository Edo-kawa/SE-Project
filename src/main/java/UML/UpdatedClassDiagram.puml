@startuml
'https://plantuml.com/class-diagram

package "Model" {
    ChessBoard "1" o-- "0..*" Piece: contains >
    ChessBoard "1" *-- "63" Square: comprises >

    Square "1" o-- "0..1" Piece: contains >

    Piece "1" *-- "1" Animal
    Piece --|> Elephant
    Piece --|> JumpingPieces
    Piece --|> Rat
    JumpingPieces --|> Tiger
    JumpingPieces --|> Lion
}

package "Utils" {
    class Location
    class SaverLoader
    enum Side
    enum Type
    class BoardBuilder
}

Piece - BoardBuilder

class ChessBoard {
<plain>- row: int
<plain>- column: int
<plain>- squares: ArrayList<Square>
<plain>- position: Location[][]
<plain>- PLAYER_1: int
<plain>- PLAYER_2: int

<plain>+ ChessBoard() // constructor
<plain>+ getPosition(int, int): Location
<plain>+ checkValidLocation(Location): boolean
<plain>+ checkLegalMove(Location, Location): boolean
'<plain>+ boolean checkLegalMove(int index, Location to)
<plain>+ moveTo(Location, Location): void
'<plain>+ void moveTo(int index, Location to)
<plain>+ checkWinner(): int
<plain>- clear(Location): void
}

class Square {
    <plain>- piece: Piece
    <plain>- type: Type

    <plain>+  Square(Piece, Type) // constructor
    <plain>+  getPieceContent(): Piece
    <plain>+  setContent(Piece c): void
    <plain>+  getType(): Type
}

Abstract class JumpingPieces{
    <plain>+ JumpingPieces(Animal, Side)
    <plain>+ canMoveToEmpty(Location, Location, Square): boolean

}
class Elephant{
    <plain>+ Elephant(Side)


    <plain># boolean outRank(Animal)
}
class Tiger{
    <plain>+ Tiger(Side)
}

class Lion{
    <plain>+ Lion(Side)
}

class Rat{
    <plain>+ Rat(Side)
    <plain>+ canMoveToEmpty(Location, Location, Square): boolean
    <plain># outRank(Animal): boolean
}

class Piece {
    <plain># side: Side
    <plain># animal: Animal

    <plain>+ Piece(Animal, Side)
    <plain>+ canMoveToEmpty(Location, Location, Square): boolean
    <plain># outRank(Animal): boolean
    <plain>+ canTake(Square): boolean
}

enum Animal {
    RAT
    CAT
    DOG
    WOL
    LEO
    TIG
    LIO
    ELE
}

enum Side {
    RED
    BLUE
}

enum Type {
    RIVER
    TRAP1
    TRAP2
    DEN1
    DEN2
    NORMAL
}

class Location {
    <plain>-row: int
    <plain>-column: int
    <plain>-index: int
    <plain>+Location(int row, int column)   // Constructor 1
    <plain>+Location(int index) // Constructor 2
    <plain>+getRow(): int
    <plain>+getCol(): int
    <plain>+getIndex(): int

}

class SaverLoader {
    <plain>+save(String fileName, int playerTurn, Location[][] positions): boolean
    <plain>+load(String fileName, BoardView view): BoardController
}

class BoardBuilder {
    <plain>+ Piece chessFactory(String, Side, int, int)
}

@enduml