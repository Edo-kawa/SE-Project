@startuml

abstract class AbstractList
interface List

enum Animal{
RAT
CAT
DOG
WOL
LEO
TIG
LIO
ELE
-int rank
+int getRank
}

class Chess{
- int x;
- int y;
- final Animal animal;

getter()
setter()
}



class Cat{
}
class Dog{
}
class Elephant{
}
class Leopard{
}
class Lion{
}
class Rat{
}
class Tiger{
}
class Wolf{
}

Chess <- Cat
Chess <- Dog
Chess <- Elephant
Chess <- Leopard
Chess <- Lion
Chess <- Rat
Chess <- Tiger
Chess <- Wolf


class ChessBoardBase{
private int width;
private int height;
private ArrayList<Square> squares;
private List<Observer> observers;

ChessBoardBase(int width, int height)
boolean checkValidLocation(Location location)
boolean checkCanCapture(Chess chess, Location location)
public boolean setChess(Chess chess, Location location)
public Chess getChess(Location location)
public Square getSquare(Location location)
public Square getSquare(int index)
public Set<Move> getLegalMoves(Location location) // we can consider send player reminder
private int location2index(Location location)
}
@enduml